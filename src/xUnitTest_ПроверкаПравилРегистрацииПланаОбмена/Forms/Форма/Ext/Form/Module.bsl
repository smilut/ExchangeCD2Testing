//TODO: Вернуть генератор заглушек для функций тестирования регистраций

//Доступные для настройки правил регистрации объекты:
//Справочники
//Документы
//ПланыВидовХарактеристик
//ПланыСчетов
//ПланыВидовРасчета
//РегистрыСведений
//РегистрыНакопления
//РегистрыБухгалтерии
//РегистрыРасчета
//БизнесПроцессы
//Задачи

//Образец процедуры тестирования регистрации объекта
//&НаКлиенте
//Процедура ТестДолжен_ПроверитьВыполнениеРегистрацииОбъектаИзСоставаПланаОбмена() Экспорт
//	//механизм правил регистрации помещает в реквизт объекта 
//	//ОбменДанными.Получатели список узлов для которых будут зарегистрированы изменения
//	//необходимо для каждого объекта конфигурации указанного в правилах регистрации
//	//прописать алгоритм формирования списка узлов получателей и после отработки 
//	//правил регистрации на конкретном объекте получать список узлов описанным для объекта
//	//способом и сравнивать полученные списки на полное совпадение
//
//		//Для Каждого текСсылка Из <СписокОбъектов> Цикл
//	  		//источник = текСсылка.ПолучитьОбъект(); //образец получения источника для справочников, документов и т.п.
//			//раскомментировать нужный для тестирования функционал
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью(""<Имя_Плана_Обмена>"", Источник, Отказ); //регистрация справочников и т.п
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра(""<Имя_Плана_Обмена>"", Источник, Отказ, Замещение); //регистрация регистров и т.п.
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента(""<Имя_Плана_Обмена>"", Источник, Отказ, РежимЗаписи, РежимПроведения); //регистрация документов
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением(""<Имя_Плана_Обмена>"", Источник, Отказ); //регистрация удалений
//			//Добавить код проверки регистрации, через набор узлов в структуре Объект.ОбменДанными.Получатели
//			//с формированием описания ошибок в <описаниеОшибки>
//		//КонецЦикла;
//		Если ЗначениеЗаполнено(описаниеОшибки) Тогда
//			ВызватьИсключение описаниеОшибки;
//		КонецЕсли;";
//
//КонецПроцедуры


&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;
&НаКлиенте
Перем СтроковыеУтилиты;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	СтроковыеУтилиты = КонтекстЯдра.Плагин("СтроковыеУтилиты");	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	НаборТестов.НачатьГруппу("Помошники формирования описания настроек плана обмена "+ИмяПланаОбмена(), Ложь);
	НаборТестов.Добавить("Процедура_ПозволяетЧерезОтладчикПолучитьСтрокуОписаниеТекущегоСоставаПланаОбмена", ,"Получить описание реального состава плана обмена через отладчик.");
	
	НаборТестов.НачатьГруппу("Тестирование настроек правил регистрации плана обмена "+ИмяПланаОбмена(), Ложь);
	НаборТестов.Добавить("ТестДолжен_ПроверитьЗагрузкуПравилРегистрации", 							,"Проверка загрузки правил регистрации.");
	НаборТестов.Добавить("ТестДолжен_ПроверитьНаличиеДубликатовОбъектовВПравилахРегистрации", 		,"Проверка наличия дублей объектов в правилах регистрации.");
	
	НаборТестов.НачатьГруппу("Тестирование настроек плана обмена "+ИмяПланаОбмена(), Ложь);	
	НаборТестов.Добавить("ТестДолжен_ПроверитьСоответствиеТекущегоИРеальногоСоставовПланаОбмена", 					,"Проверка соответствия тестового и реального составов плана обмена.");
	НаборТестов.Добавить("ТестДолжен_ПроверитьСоответствиеНастроекСоставаПланаОбменаИПодписокРегистрацииИзменений", ,"Проверка соответствия состава плана обмена и подписок регистрации изменений.");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьСоответствиеСоставаПланаОбменаИПравилРегистрации", 					,"Проверка соответствие состава плана обмена правил регистрации.");
	
	НаборТестов.НачатьГруппу("Тестирование регистрации объектов обмена "+ИмяПланаОбмена(), Ложь);	
	ЗаполнитьНаборТестовПереопределяемый(НаборТестов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнение(данные, сообщ)
	Если НЕ ЗначениеЗаполнено(данные) Тогда
		ВызватьИсключение сообщ;
	КонецЕсли;	
КонецПроцедуры

//{ переопределяемые функции для настройки тестов
#Область ПереопределяемыеПроцедурыФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПланаОбмена()
	Возврат ИмяПланаОбменаСервер();
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПланаОбменаСервер()
	Возврат ПланОбменаМетаданные().Имя;
КонецФункции

//должна вернуть тестируемый план обмена
&НаСервереБезКонтекста
Функция ПланОбменаМетаданные()
	метаПланОбмена = Метаданные.ПланыОбмена.дмнБСХП_БСХП;
	Попытка
		Если Метаданные.ПланыОбмена.Содержит(метаПланОбмена) = Истина Тогда
			Возврат метаПланОбмена;
		КонецЕсли;
	Исключение		
	КонецПопытки;
	ВызватьИсключение "Ошибка вызова функции <ПланОбменаМетаданные()>. Укажите объект метаданных ПланОбмена для тестирования.";
КонецФункции

//строка содержащая описание желаемого состава плана обмена
&НаСервереБезКонтекста
Функция СтрокаПереченьОбъектовСоставаПланаОбмена()
 стрСоставПланаОбмена = 
"Документ.ВозвратТоваровПоставщику,
|Документ.ИнвентаризацияТоваровНаСкладе,
|Документ.КомплектацияНоменклатуры,
|Документ.ОприходованиеТоваров,
|Документ.РеализацияТоваровУслуг,
|Документ.СписаниеТоваров,
|Документ.дмнАктВыполненныхРабот,
|Документ.дмнАктОценкиТМЦ,
|Документ.дмнАктРасхожденияТМЦ,
|Документ.дмнВводНачальныхОстатков,
|Документ.дмнВводНормТО,
|Документ.дмнДефектнаяВедомость,
|Документ.дмнЗаданиеНаВыполнениеДефектовочныхРабот,
|Документ.дмнЗаказНаряд,
|Документ.дмнЗаказПоставщику,
|Документ.дмнКомплектацияНоменклатуры,
|Документ.дмнНачислениеДоплат,
|Документ.дмнОперативныйОтчет,
|Документ.дмнПриходныйОрдерНаТовары,
|Документ.дмнРасходныйОрдерНаТовары,
|Документ.дмнТабельУчетаРабочегоВремени,
|Документ.дмнТребованиеНакладнаяРемонтТехники,
|Документ.дмнФактическоеНаличиеТоваров,
|Документ.схРеализацияСельхозПродукции,
|Документ.дмнРегистрацияВидовДоплатПоПутевымЛистам,
|Константа.дмнАСПСвеклаПараметрыАрхивирования,
|Константа.дмнАСПСвеклаПараметрыПодключения,
|РегистрСведений.АмортизационныеГруппыОКОФ,
|РегистрСведений.ПроцентыРаспределенияОХР,
|РегистрСведений.СоответствиеЕдИзмУслугамМТП,
|РегистрСведений.СоответствиеНГиОЭ,
|РегистрСведений.СчетаУчетаНоменклатуры,
|РегистрСведений.СчетаУчетаРасчетовСКонтрагентами,
|РегистрСведений.Штрихкоды,
|РегистрСведений.ШтрихкодыПоставщиков,
|РегистрСведений.дмнДатыНачалаРаботыОрганизацийСДопФункционалом,
|РегистрСведений.дмнЗапрещенныеКИспользованиюВидыСХРабот,
|РегистрСведений.дмнКонсолидированныеВидыНоменклатуры,
|РегистрСведений.дмнКоэффициентыПересчетаПродукцииРастенееводстваВЗеленуюМассу,
|РегистрСведений.дмнОперативныеДанные,
|РегистрСведений.дмнПлановыеПараметрыОперучета,
|РегистрСведений.дмнПроцентРаспределенияРасходовПоЦФО,
|РегистрСведений.дмнРазрешитьОформлениеВыпускаВручную,
|РегистрСведений.дмнСоответствияОбъектовИнформационныхБаз,
|РегистрСведений.дмнСписокНГИсключаемыйПриРаспределенииАренднойПлаты,
|РегистрСведений.дмнСписокНГИсключаемыйПриРаспределенииОПРиОХР,
|РегистрСведений.ясхСпособыЗакрытия23Счета,
|РегистрСведений.СостоянияСогласованияВДокументообороте,
|Справочник.Валюты,
|Справочник.ВидыВзаиморасчетов,
|Справочник.ВидыНоменклатуры,
|Справочник.ДоговорыКонтрагентов,
|Справочник.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов,
|Справочник.КлассификаторЕдиницИзмерения,
|Справочник.КлассификаторСтранМира,
|Справочник.Номенклатура,
|Справочник.НоменклатураПоставщиков,
|Справочник.НоменклатурныеГруппы,
|Справочник.ОбщероссийскийКлассификаторОсновныхФондов,
|Справочник.Организации,
|Справочник.ОсновныеСредства,
|Справочник.ПараметрыВыработкиОС,
|Справочник.ПодразделенияОрганизаций,
|Справочник.ПрочиеДоходыИРасходы,
|Справочник.РасходыБудущихПериодов,
|Справочник.Склады,
|Справочник.СотрудникиОрганизаций,
|Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов,
|Справочник.СпособыОтраженияЗакрытия23Счета,
|Справочник.СпособыОтраженияЗарплатыВРеглУчете,
|Справочник.СтатьиЗатрат,
|Справочник.ТипыЦенНоменклатуры,
|Справочник.ФизическиеЛица,
|Справочник.дмнВидыВходящихДокументов,
|Справочник.дмнВидыДефектов,
|Справочник.дмнВидыДоплатПоПутевымЛистам,
|Справочник.дмнКлассностьВодителей,
|Справочник.дмнНастройкиУведомленийWialon,
|Справочник.дмнОбъектыЭксплуатации,
|Справочник.дмнПричиныДефектныхВедомостей,
|Справочник.дмнПричиныОтменыНачислений,
|Справочник.дмнПричиныПростоя,
|Справочник.дмнТехОперацииОперучета,
|Справочник.схАгротехническиеУсловияВыполненияРабот,
|Справочник.схВидРаботСХ,
|Справочник.схВидыДвиженийЖивотныхПтицы,
|Справочник.схКультура,
|Справочник.схМаркаСельхозТехники,
|Справочник.схМаршруты,
|Справочник.схПоля,
|Справочник.схСпособыРаспределенияКосвенныхЗатрат,
|Справочник.схСтруктураПосевныхПлощадей,
|Справочник.схТарифныеРазряды,
|Справочник.схТехнологическиеОперации,
|Справочник.яСхВидыУдобренийИСЗР,
|Справочник.ягкСписокНачисленийДляЗпПоАвтопарку";
 
 ПроверитьЗаполнение(стрСоставПланаОбмена, "Добавьте описание планируемого состава плана обмена.");
 Возврат стрСоставПланаОбмена;
КонецФункции

//Возвращает структуру, в которой описывается тип и расположение источника правил регистрации
&НаСервереБезКонтекста
Функция ИсточникПравилРегистрации()
	источникПравил = Новый ФиксированнаяСтруктура("Тип, Путь", ТипыИсточникаПравил().Файл, "\\msk-fs\Dominant_Docs\Общая\Милютинский\БСХП\Обмен БСХП-БСХП\20190427\Правила регистрации1.xml");
	ПроверитьЗаполнение(источникПравил, "Укажите источник правил регистрации для тестирования.");
	Возврат источникПравил;
КонецФункции

//очень важная для заполнения функция, т.к. автоматически определить какие подписки на события отвечают
//за регистрацию изменений объектов входящих в план обмена пока не получается
//возвращает соответствие типа объекта источникам для подписок на события для регистрации изменений
&НаСервереБезКонтекста
Функция ИсточникиДляПодписокРегистрацииИзменений()
	//структура соответствия получения источников
	//событий регистрации изменений 
	типыОбъектовОбмена = ТипыОбъектовОбмена();
	
	соотв = Новый Соответствие;
	//для константы в КД2 правила регистрации не создаются,
	//поэтому соответствие с подпиской не проверяется
	соотв.Вставить(типыОбъектовОбмена.Константа, Неопределено); 	
	соотв.Вставить(типыОбъектовОбмена.Справочник, 
		Метаданные.ПодпискиНаСобытия.дмнПередЗаписьюОбъектовДляОбменаБСХП_БСХП.Источник
	);
	соотв.Вставить(типыОбъектовОбмена.Документ,
		Метаданные.ПодпискиНаСобытия.дмнПередЗаписьюДокументовДляОбменаБСХП_БСХП.Источник
	);
	соотв.Вставить(типыОбъектовОбмена.ПланВидовХарактеристик,	Неопределено);
	соотв.Вставить(типыОбъектовОбмена.ПланСчетов, 				Неопределено);
	соотв.Вставить(типыОбъектовОбмена.ПланВидовРасчета, 		Неопределено);
	соотв.Вставить(типыОбъектовОбмена.РегистрСведений, 			
		Метаданные.ПодпискиНаСобытия.дмнПередЗаписьюРегистровДляОбменаБСХП_БСХП.Источник
	);
	соотв.Вставить(типыОбъектовОбмена.РегистрНакопления, 		Неопределено);
	соотв.Вставить(типыОбъектовОбмена.РегистрБухгалтерии, 		Неопределено);
	соотв.Вставить(типыОбъектовОбмена.РегистрРасчета, 			Неопределено);
	соотв.Вставить(типыОбъектовОбмена.БизнесПроцесс, 			Неопределено);
	соотв.Вставить(типыОбъектовОбмена.Задача, 					Неопределено);
	
	Возврат соотв;
КонецФункции

//Запись правил  в рег. сведений для хранения правил регистрации/обмена
//может потребоваться для тестирования загрузки правил в конфигурацию
//и для загрузки правил непосредственно перед тестированием
&НаСервереБезКонтекста
Процедура ЗагрузитьПравила(ИсточникПравил, ЭтоПравилаРегистрации = Ложь)					
	ИмяПлана = ИмяПланаОбмена();
	
 	ВидПравил = ?(ЭтоПравилаРегистрации,
		Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов,
		Перечисления.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов
	);
	
	ИмяМакетаПравил = ""; ПутьКФайлуПравил = "";
	этоПравилаИзМакета = (ИсточникПравил.Тип = ТипыИсточникаПравил().Макет);
	Если этоПравилаИзМакета = Истина Тогда
		ИмяМакетаПравил = ИсточникПравил.Путь;
	Иначе
		ПутьКФайлуПравил = ИсточникПравил.Путь;
	КонецЕсли;
		
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИмяПланаОбмена",  ИмяПлана);
	СтруктураЗаписи.Вставить("ВидПравил",       ВидПравил);
	СтруктураЗаписи.Вставить("ИмяМакетаПравил", ИмяМакетаПравил);
	СтруктураЗаписи.Вставить("ИсточникПравил",  ?(этоПравилаИзМакета = Истина,
													Перечисления.ИсточникиПравилДляОбменаДанными.МакетКонфигурации,
													Перечисления.ИсточникиПравилДляОбменаДанными.Файл
												)
							);
							
	СтруктураЗаписи.Вставить("ИспользоватьФильтрВыборочнойРегистрацииОбъектов", Истина);	
	
	НаборЗаписей = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПланаОбмена.Установить(ИмяПлана);
	НаборЗаписей.Отбор.ВидПравил.Установить(ВидПравил);	
	
	НоваяЗапись = НаборЗаписей.Добавить();  	
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураЗаписи);	
	
	Отказ = Ложь;	
	Если этоПравилаИзМакета = Истина Тогда
		//загрузка из макета плана обмена
		РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НоваяЗапись);		
	Иначе
		файл = Новый Файл(ПутьКфайлуПравил);
		Если НЕ файл.Существует() Тогда
			ВызватьИсключение "Файл правил не существует:"+ПутьКФайлуПравил;
		КонецЕсли;			
		
		ИмяФайлаПравил = файл.Имя;
		РасширениеФайла = НРег(Прав(файл.ПолноеИмя, 4));
		ЭтоАрхив = (РасширениеФайла = ".zip");
		
		данныеПравил = Новый ДвоичныеДанные(ПутьКФайлуПравил);		
		РегистрыСведений.ПравилаДляОбменаДанными.ЗагрузитьПравила(Отказ, НоваяЗапись,, ПутьКФайлуПравил, данныеПравил, ЭтоАрхив);
	КонецЕсли;
	
	Если Отказ = Истина Тогда
		ВызватьИсключение "Ошибка загрузки тестируемых правил.";
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	//эти строки могут зависить от тестируемой системы
	//тестировалось на БП 2.5
	ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов();
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#КонецОбласти //переопределяемые проедуры/функции
//} переопределяемые функции для настройки тестов

#Область СлужебныеПроцедурыИФункции
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивПроцедурТестированияРегистрации()
	мПроцедуры = Новый Массив;
	строкаОписание = ПолучитьСтрокуОписаниеТекущегоСоставаПланаОбмена();
	массивОбъектов = СтрРазделить(строкаОписание, ",", Ложь);
	спсЗначений = Новый СписокЗначений;
	спсЗначений.ЗагрузитьЗначения(массивОбъектов);
	спсЗначений.СортироватьПоЗначению();
	Для Каждого элт Из спсЗначений Цикл
		имя = СокрЛП(СтрЗаменить(СтрЗаменить(элт.Значение,".",""),"|",""));
		Если имя<>"" Тогда
			мПроцедуры.Добавить("ПроверитьРегистрацию_"+имя+"()");
		КонецЕсли;
	КонецЦикла;
	
	Возврат мПроцедуры;
КонецФункции

//автоматически формирует список тестов для проерки правил регистрации
//по составу плана обмена
&НаКлиенте
Процедура ЗаполнитьНаборТестовПереопределяемый(НаборТестов)
	//генерим код для набор тестов, который необходимо поместить
	//в ЗаполнитьНаборТестов() это позволит иметь отдельный тест на каждое правило регистрации
	//а также добавить тест на полноту этих правил
	
	мПроцедур = ПолучитьМассивПроцедурТестированияРегистрации();		
	текстДляПроцедурыЗаполненияНаборовТестов = "";
	Для Каждого элт Из мПроцедур Цикл			
		//Образец заполнения набора тестов
		//НаборТестов.Добавить("ТестДолжен_ПроверитьВыполнениеРегистрацииОбъектовИзСоставаПланаОбмена",  ,"Проверка функционирования правил регистрации объектов из состава плана обмена.");
		наименованиеТестируемогоОбъекта = СтрЗаменить(СтрЗаменить(элт,"()",""),"ПроверитьРегистрацию_","");
		текстДляПроцедурыЗаполненияНаборовТестов = текстДляПроцедурыЗаполненияНаборовТестов+
			СтрШаблон("НаборТестов.Добавить(""%1"", ,""%2"");",
						"ТестДолжен_"+СтрЗаменить(элт,"()",""),						
						"Проверка функционирования правил регистрации "+наименованиеТестируемогоОбъекта
			)
			+Символы.ПС;
	КонецЦикла;
		
	Выполнить(текстДляПроцедурыЗаполненияНаборовТестов);
КонецПроцедуры

//преобразует строку описание состава плана обмена
//в соответствие
//как пример использования: проверка текущего состава плана обмена в тестируемой конфигурации
//и предварительно описанного на добавление удаление элементов
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеСоставПланаОбмена()
	стрСостав = СтрокаПереченьОбъектовСоставаПланаОбмена();
	мСостав = СтрРазделить(стрСостав, ",", Ложь);
	
	результатСравнения = РезультатСравнения();
	
	соотвСостав = Новый Соответствие;
	Для Каждого элт Из мСостав Цикл
		соотвСостав.Вставить(СокрЛП(элт), результатСравнения.Совпадает);
	КонецЦикла;
	
	Возврат соотвСостав;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатСравнения()
	Возврат Новый ФиксированнаяСтруктура("Совпадает, Добавлен, Удален", 0, 1, -1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРезультатаСравнения(результат)
	соотв = Новый Соответствие;
	соотв.Вставить(0, "Совпадает");
	соотв.Вставить(1, "Добавлен");
	соотв.Вставить(-1, "Удален");
	
	Возврат соотв.Получить(результат);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыИсточникаПравил()
	Возврат Новый ФиксированнаяСтруктура("Файл, Макет", 0, 1);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыОбъектовОбмена()
	Возврат Новый ФиксированнаяСтруктура(
							"Константа,                  
							|Справочник,
							|Документ,
							|ПланВидовХарактеристик,
							|ПланСчетов,
							|ПланВидовРасчета,
							|РегистрСведений,
							|РегистрНакопления,
							|РегистрБухгалтерии,
							|РегистрРасчета,
							|БизнесПроцесс,
							|Задача", 
							0,//"Константы,                  
							1,//|Справочники,
							2,//|Документы,
							3,//|ПланыВидовХарактеристик,
							4,//|ПланыСчетов,
							5,//|ПланыВидовРасчета,
							6,//|РегистрыСведений,
							7,//|РегистрыНакопления,
							8,//|РегистрыБухгалтерии,
							9,//|РегистрыРасчета,
							10,//|БизнесПроцессы,
							11 //|Задачи" 	
	);
КонецФункции

&НаСервереБезКонтекста
Функция МетаданыеТиповОбъектовОбмена()
	соотв = Новый Соответствие;
	
	соотв.Вставить(0,Метаданные.Константы);
	соотв.Вставить(1,Метаданные.Справочники);
	соотв.Вставить(2,Метаданные.Документы);
	соотв.Вставить(3,Метаданные.ПланыВидовХарактеристик);
	соотв.Вставить(4,Метаданные.ПланыСчетов);
	соотв.Вставить(5,Метаданные.ПланыВидовРасчета);
	соотв.Вставить(6,Метаданные.РегистрыСведений);
	соотв.Вставить(7,Метаданные.РегистрыНакопления);
	соотв.Вставить(8,Метаданные.РегистрыБухгалтерии);
	соотв.Вставить(9,Метаданные.РегистрыРасчета);
	соотв.Вставить(10,Метаданные.БизнесПроцессы);
	соотв.Вставить(11,Метаданные.Задачи);
							
	Возврат соотв;
КонецФункции

&НаСервереБезКонтекста
Функция ИмяТипаИсточникаПоИмениТипаОбъектаОбмена(ИмяТипаОбъектаОбмена)
	структура =  Новый ФиксированнаяСтруктура(
							"Справочник,
							|Документ,
							|ПланВидовХарактеристик,
							|ПланСчетов,
							|ПланВидовРасчета,
							|РегистрСведений,
							|РегистрНакопления,
							|РегистрБухгалтерии,
							|РегистрРасчета,
							|БизнесПроцесс,
							|Задача",							
							"СправочникОбъект",
							"ДокументОбъект",
							"ПланВидовХарактеристикОбъект",
							"ПланСчетовОбъект",
							"ПланВидовРасчетаОбъект",
							"РегистрСведенийНаборЗаписей",
							"РегистрНакопленияНаборЗаписей",
							"РегистрБухгалтерииНаборЗаписей",
							"РегистрыРасчетаНаборЗаписей",
							"БизнесПроцессОбъект",
							"ЗадачаОбъект"
	);
	
	Возврат структура[ИмяТипаОбъектаОбмена];
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТипаОбъектаОбмена(объект)
	соотв = Новый Соответствие;
	соотв.Вставить(0, "Константа");
	соотв.Вставить(1, "Справочник");
	соотв.Вставить(2, "Документ");
	соотв.Вставить(3, "ПланВидовХарактеристик");
	соотв.Вставить(4, "ПланСчетов");
	соотв.Вставить(5, "ПланВидовРасчета");
	соотв.Вставить(6, "РегистрСведений");
	соотв.Вставить(7, "РегистрНакопления");
	соотв.Вставить(8, "РегистрБухгалтерии");
	соотв.Вставить(9, "РегистрРасчета");
	соотв.Вставить(10,"БизнесПроцесс");
	соотв.Вставить(11,"Задача");
	
	Возврат соотв.Получить(объект);
КонецФункции

//проверка соответствия состава плана обмена и состава подписок регистрации 
//изменений объектов
//Параметры:
//метаТип -- тип проверяемых метаданных, например Метаданные.Справочники
//источники -- источник	для подписки на событие (описание типов)
&НаСервереБезКонтекста
Функция ПолучитьНесоответствияСоставаПланаИПодписокРегистрации(метаТип, источники)
	планОбмена = ПланОбменаМетаданные();	
	мНесоответствия = Новый Массив;         
	
	//проверяем вхождение объектов плана обмена в источники
	Для Каждого элт Из планОбмена.Состав Цикл
		Если элт.Авторегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		полноеИмя 	= элт.Метаданные.ПолноеИмя();
		метаИмя		= элт.Метаданные.Имя;
		имяТипа 	= Лев(полноеИмя, СтрНайти(полноеИмя, ".")-1);
		Если метаТип.Найти(метаИмя) <> Неопределено Тогда //объект соответствует проверяемому типу
			//у объекта может быть авторегистрация, тогда его нельзя включать в подписку
			Если элт.Авторегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
				Если источники.СодержитТип(Тип(ИмяТипаИсточникаПоИмениТипаОбъектаОбмена(имяТипа)+"."+метаИмя)) Тогда		
					мНесоответствия.Добавить(полноеИмя+"-Авторегистрация. В подписку не включать");
				КонецЕсли;
			Иначе //авторгегистрация запрещена
				Если НЕ источники.СодержитТип(Тип(ИмяТипаИсточникаПоИмениТипаОбъектаОбмена(имяТипа)+"."+метаИмя)) Тогда		
					мНесоответствия.Добавить(полноеИмя+"-Объект не включен в подписку.");
				КонецЕсли;
			КонецЕсли; //авторгегистрация				
		КонецЕсли;//соответствие объекта проверяемому типу
	КонецЦикла;	
	
	//проверяем вхождение источников подписки в состав плана обмена
	типы = источники.Типы();
	Для Каждого элт Из типы Цикл
		метаИсточник = Метаданные.НайтиПоТипу(элт);
		объектПроверки = планОбмена.Состав.Найти(метаИсточник);
		Если объектПроверки = Неопределено Тогда
			//объект есть в подписке, но его нет в составе плана обмена
			мНесоответствия.Добавить(метаИсточник.ПолноеИмя()+"-Объект не включен в план обмена.");
		Иначе
			//объект есть в подписке и в плане обмена. проверим авторегистрацию
			Если объектПроверки.Авторегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
				мНесоответствия.Добавить(метаИсточник.ПолноеИмя()+"-Авторегистрация. В подписку не включать.");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мНесоответствия;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьОписаниеИзМассива(массив)
	стр = "";
	Для Каждого элт Из массив Цикл
		стр = стр+"|"+элт+","+Символы.ПС;
	КонецЦикла;
	Возврат стр;
КонецФункции

//дополняет набор тестов тестами для правил регистраций по составу плана обмена
&НаКлиенте
Процедура ДополнитьНаборТестовТестамиРегистрацииОбъектов(НаборТестов)
	мПроцедур = ПолучитьМассивПроцедурТестированияРегистрации();
	Для Каждого тест Из мПроцедур Цикл
		НаборТестов.Добавить("ТестДолжен_"+СтрЗаменить(тест, "()", ""), ,"Проверка функционирования правила регистрации "+тест);
	КонецЦикла;
КонецПроцедуры

//возвращает источник для подписки на событие, в котором обрабатывается регистрация изменений справочников
&НаСервереБезКонтекста
Функция ИсточникПодпискиНаСобытиеДляРегистрацииИзменений(ТипОбъекта)
	источникиСобытия = ИсточникиДляПодписокРегистрацииИзменений();
	ПроверитьЗаполнение(источникиСобытия.Получить(ТипОбъекта), "Укажите источники события перед записью для регистрации изменений.");
	Возврат источникиСобытия.Получить(ТипОбъекта);
КонецФункции

&НаСервереБезКонтекста
Функция ТипыОбъектовВошедшиеВСоставПланаОбмена()
	планОбмена = ПланОбменаМетаданные();
	соотв = Новый Соответствие;
	Для Каждого элт Из планОбмена.Состав Цикл
		полноеИмя = элт.Метаданные.ПолноеИмя();
		типОбъекта = Лев(полноеИмя,СтрНайти(полноеИмя,".")-1);
		Если элт.Авторегистрация = АвтоРегистрацияИзменений.Запретить Тогда
			соотв.Вставить(типОбъекта, Истина);
		Иначе
			Если соотв.Получить(типОбъекта) <> Истина Тогда
				соотв.Вставить(типОбъекта, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат соотв;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивУзловПланаОбмена()
	выб = ПланыОбмена[ИмяПланаОбмена()].Выбрать();
	этотУзел = ПланыОбмена[ИмяПланаОбмена()].ЭтотУзел();
	мУзлы = Новый Массив;
	Пока выб.Следующий() Цикл
		Если выб.Ссылка = этотУзел Тогда
			Продолжить;
		КонецЕсли;
		
		мУзлы.Добавить(выб.Ссылка);
	КонецЦикла;	
	
	Возврат мУзлы;
КонецФункции
#КонецОбласти
//СлужебныеПроцедурыИФункции
// } интерфейс тестирования

// { блок юнит-тестов - сами тесты 

#Область ТестированиеСоставаПланаОбмена
&НаСервереБезКонтекста
Функция ПолучитьСоответствиеТестовогоИРеальногоСоставовПланаОбмена()
	тестовоеСоответствие = ПолучитьСоответствиеСоставПланаОбмена();
	планОбмена = ПланОбменаМетаданные();
	
	//соотвентствие описывающее совпадение планового состава и текущего состава плана обмена
	соотвСостава = Новый Соответствие;
	
	результатСравнения = РезультатСравнения();
	
	//проверка вхождения объектов из разработки в плановый перечень
	Для Каждого элт Из планОбмена.Состав Цикл
		полноеИмя = элт.Метаданные.ПолноеИмя();
		//заполняем соответствие признаком сопоставленности с плановыми данными
		//если ключ в тестовом соответствии найден проставляем совпадение.Совпадает
		//иначе добавляем новый ключ с признаком совпадение.Добавлен -- добавлен в разработку
		//по этому признаку далее выберем не совпавшие элементы
		соотвСостава.Вставить(полноеИмя, 
								?(тестовоеСоответствие.Получить(полноеИмя)<>Неопределено, 
										результатСравнения.Совпадает, 
										результатСравнения.Добавлен
								)
							);							
	КонецЦикла;
						
	//проверка вхождения плановых объектов в разработку
	Для Каждого элт Из тестовоеСоответствие Цикл
		полноеИмя = элт.Ключ;
		//заполняем соответствие признаком сопоставленности с данными разработки
		//если ключ в соответствии найден пропускаем, т.к. данный плановый элемент уже сопоставлен
		//иначе добавляем новый ключ с признаком совпадение.Удален -- удален из разработки
		//по этому признаку далее выберем не совпавшие элементы
		Если соотвСостава.Получить(полноеИмя) <> Неопределено Тогда
			Продолжить; //объект входит в плановые данные и уже обработан
		Иначе		
			соотвСостава.Вставить(полноеИмя, результатСравнения.Удален);
		КонецЕсли;
	КонецЦикла;
	
	Возврат соотвСостава;
КонецФункции

&НаКлиенте
Процедура ТестДолжен_ПроверитьСоответствиеТекущегоИРеальногоСоставовПланаОбмена() Экспорт
	соотвСостава = ПолучитьСоответствиеТестовогоИРеальногоСоставовПланаОбмена();
	результатСравнения = РезультатСравнения();
	
	описание = "";
	Для Каждого зап Из соотвСостава Цикл
		Если зап.Значение <> результатСравнения.Совпадает Тогда
			описание = описание +"|"+зап.Ключ+":"+ПредставлениеРезультатаСравнения(зап.Значение)+","+Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Утверждения.ПроверитьРавенство(0, СтрДлина(СокрЛП(описание)), 
			"Если необходимо скорректируйте функцию <СтрокаПереченьОбъектовСоставаПланаОбмена()> в модуле формы теста.
			|Не совпадающие элементы тестового и реального составов плана обмена:"+
			Символы.ПС+описание
	);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеНастроекСоставаПланаОбменаИПодписокРегистрацииИзменений()
	//укрупненно проверяем наличие источников для всех типов объектов входящих 
	//в план обмена/подписки на событие	
	типыОбъектовПланаОбмена = ТипыОбъектовВошедшиеВСоставПланаОбмена();
	источникиСобытий = ИсточникиДляПодписокРегистрацииИзменений();
	
	мНесоответствияПО = Новый Массив;
	//проверяем наличие подписок по составу плана обмена
	Для Каждого элт Из типыОбъектовПланаОбмена Цикл
		Если элт.Значение = Истина Тогда
			Если источникиСобытий.Получить(ТипыОбъектовОбмена()[элт.Ключ]) = Неопределено Тогда
				мНесоответствияПО.Добавить(элт.Ключ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	//проверяем состав плана обмена по подпискам описанным в тесте
	мНесоответствияПС = Новый Массив;
	Для Каждого источник Из источникиСобытий Цикл
		Если источник.Значение <> Неопределено Тогда
			имяТипаОбъектаОбмена = ПредставлениеТипаОбъектаОбмена(источник.Ключ);
			Если типыОбъектовПланаОбмена.Получить(имяТипаОбъектаОбмена) <> Истина Тогда
				мНесоответствияПС.Добавить(имяТипаОбъектаОбмена);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если мНесоответствияПО.Количество()>0 ИЛИ мНесоответствияПС.Количество()>0 Тогда
		ВызватьИсключение "Необходимо включить эти типы в источники для подписок на события регистрации изменений,
							|т.к. объекты этих типов входят в состав плана обмена:"
							+Символы.ПС+СформироватьОписаниеИзМассива(мНесоответствияПО)+Символы.ПС
							+"Необходимо либо включить объекты указанных типов в состав плана обмена с запретом авторегистрации, 
							|либо исключить их из источников подписок на события регистрации изменений:"
							+Символы.ПС+СформироватьОписаниеИзМассива(мНесоответствияПС);
	КонецЕсли;
	
	//проверяем соответствие состава источника подписки и плана обмена для каждого типа объектов
	//т.е. если тип объекта есть в подписке, 
	описаниеОшибки = "";
	Для Каждого элт Из ИсточникиДляПодписокРегистрацииИзменений() Цикл
		Если элт.Значение <> Неопределено Тогда
			источники = элт.Значение;
			метаТип = МетаданыеТиповОбъектовОбмена().Получить(элт.Ключ);
			мНесоответствия = ПолучитьНесоответствияСоставаПланаИПодписокРегистрации(метаТип, источники);
			
			Если мНесоответствия.Количество() > 0 Тогда
				описаниеОшибки = описаниеОшибки
						+"Найдены несоответствия в реализации подписки на событие регистрции изменений объектов типа:"
						+ПредставлениеТипаОбъектаОбмена(элт.Ключ)+Символы.ПС
						+СформироватьОписаниеИзМассива(мНесоответствия)+Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(описаниеОшибки) Тогда
		ВызватьИсключение "Ошибка описания источников подписок на события регистрации изменений объектов плана обмена:"+Символы.ПС+описаниеОшибки;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьСоответствиеНастроекСоставаПланаОбменаИПодписокРегистрацииИзменений() Экспорт
	ПроверитьСоответствиеНастроекСоставаПланаОбменаИПодписокРегистрацииИзменений();
КонецПроцедуры

#КонецОбласти
//ТестированиеСоставаПланаОбмена

#Область ТестированиеПравилРегистрации

&НаСервереБезКонтекста
Процедура ПроверитьЗагрузкуПравилРегистрации()
	источникПравил = ИсточникПравилРегистрации();
	ЗагрузитьПравила(источникПравил, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьЗагрузкуПравилРегистрации() Экспорт
	ПроверитьЗагрузкуПравилРегистрации();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПравилаРегистрации()
	прЗапись = РегистрыСведений.ПравилаДляОбменаДанными.СоздатьМенеджерЗаписи();
	прЗапись.ВидПравил = Перечисления.ВидыПравилДляОбменаДанными.ПравилаРегистрацииОбъектов;
	прЗапись.ИмяПланаОбмена = ИмяПланаОбмена();
	
	прЗапись.Прочитать();
	Если прЗапись.Выбран() Тогда
		Возврат прЗапись.ПравилаЗачитанные.Получить();
	Иначе
		ВызватьИсключение "Ошибка чтения правила регистрации для "+ИмяПланаОбмена()+".";
	КонецЕсли;
КонецФункции	

&НаСервереБезКонтекста
Процедура ПроверитьНаличиеДубликатовОбъектовВПравилахРегистрации()
	табПравилаРегистрации = ПолучитьПравилаРегистрации();
	мОбъектыРегистрации = табПравилаРегистрации.ВыгрузитьКолонку("ОбъектМетаданныхИмя");
	составПравилРегистрации = Новый Соответствие;
	дубли = "";
	Для Каждого элт Из мОбъектыРегистрации Цикл
		Если составПравилРегистрации.Получить(элт) = Неопределено Тогда
			составПравилРегистрации.Вставить(элт, Истина);
		Иначе
			дубли = дубли+элт+","+Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(дубли) Тогда
		ВызватьИсключение "Найдены дубли объектов в правилах регистрации:"+Символы.ПС+дубли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьНаличиеДубликатовОбъектовВПравилахРегистрации() Экспорт
	ПроверитьНаличиеДубликатовОбъектовВПравилахРегистрации();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьСоответствиеСоставаПланаОбменаИПравилРегистрации()
	табПравилаРегистрации = ПолучитьПравилаРегистрации();
	мОбъектыРегистрации = табПравилаРегистрации.ВыгрузитьКолонку("ОбъектМетаданныхИмя");	
	планОбмена = ПланОбменаМетаданные();
	
	мНетВПланеОбмена = Новый Массив;
	//проходим по объектам правил. Все правила должны соответствовать объектам
	Для Каждого элт Из мОбъектыРегистрации Цикл
		Если планОбмена.Состав.Найти(Метаданные.НайтиПоПолномуИмени(элт)) = Неопределено Тогда
			мНетВПланеОбмена.Добавить(элт);
		КонецЕсли;
	КонецЦикла;	
	
	мНетВПравилахРегистрации = Новый Массив;
	//проходим по составу плана обмена. Все элементы состава плана обмена запрещенные
	//для автоматической регистрации должны соответствовать правилам регистрации
	Для Каждого элт Из планОбмена.Состав Цикл
		Если элт.Авторегистрация <> АвтоРегистрацияИзменений.Разрешить //элемен плана обмена не входит в правила
			И мОбъектыРегистрации.Найти(элт.Метаданные.ПолноеИмя()) = Неопределено
		Тогда
			мНетВПравилахРегистрации.Добавить(элт.Метаданные.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	описаниеОшибки = "";	
	Если мНетВПланеОбмена.Количество() > 0 
		ИЛИ мНетВПравилахРегистрации.Количество() > 0
	Тогда
	    описаниеОшибки = "В плане обмена не найдены объекты:"
			+СформироватьОписаниеИзМассива(мНетВПланеОбмена)+Символы.ПС
			+"В правилах регистрации не найдены объекты:"
			+СформироватьОписаниеИзМассива(мНетВПравилахРегистрации);			
	КонецЕсли;
		
	Если ЗначениеЗаполнено(описаниеОшибки) Тогда
		ВызватьИсключение описаниеОшибки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьСоответствиеСоставаПланаОбменаИПравилРегистрации() Экспорт
	ПроверитьСоответствиеСоставаПланаОбменаИПравилРегистрации();
КонецПроцедуры

#КонецОбласти 
//ТестированиеПравилРегистрации

#Область НеТестоваяФункциональностьДляПолученияПодручнойИнформации
&НаСервереБезКонтекста
Функция ПолучитьСтрокуОписаниеТекущегоСоставаПланаОбмена() 
	планОбмена = ПланОбменаМетаданные();
	строкаОписание = "";
	Для Каждого элт Из планОбмена.Состав Цикл
		полноеИмя 	= элт.Метаданные.ПолноеИмя();
		строкаОписание = строкаОписание+"|"+полноеИмя+","+Символы.ПС;
	КонецЦикла;	
	
	Возврат строкаОписание;
КонецФункции

&НаКлиенте
Процедура Процедура_ПозволяетЧерезОтладчикПолучитьСтрокуОписаниеТекущегоСоставаПланаОбмена() Экспорт
	строкаОписание = ПолучитьСтрокуОписаниеТекущегоСоставаПланаОбмена();
КонецПроцедуры

#КонецОбласти

#Область ТестыПроверкиРегистрацииОбъектовИзСоставаПланаОбмена
//Образец процедуры тестирования регистрации объекта
//&НаКлиенте
//Процедура ТестДолжен_ПроверитьВыполнениеРегистрацииОбъектаИзСоставаПланаОбмена() Экспорт
//	//механизм правил регистрации помещает в реквизт объекта 
//	//ОбменДанными.Получатели список узлов для которых будут зарегистрированы изменения
//	//необходимо для каждого объекта конфигурации указанного в правилах регистрации
//	//прописать алгоритм формирования списка узлов получателей и после отработки 
//	//правил регистрации на конкретном объекте получать список узлов описанным для объекта
//	//способом и сравнивать полученные списки на полное совпадение
//      //СписокОбъектов = <Получить список объектов для тестировния правил регистрации>;
//		//Для Каждого текСсылка Из СписокОбъектов Цикл
//	  		//источник = текСсылка.ПолучитьОбъект(); //образец получения источника для справочников, документов и т.п.
//			////раскомментировать нужный для тестирования функционал
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью(ИмяПланаОбмена(), Источник, Отказ); //регистрация справочников и т.п
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюРегистра(ИмяПланаОбмена(), Источник, Отказ, Замещение); //регистрация регистров и т.п.
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента(ИмяПланаОбмена(), Источник, Отказ, РежимЗаписи, РежимПроведения); //регистрация документов
//			//ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередУдалением(ИмяПланаОбмена(), Источник, Отказ); //регистрация удалений
//			//Добавить код проверки регистрации, через набор узлов в структуре Объект.ОбменДанными.Получатели
//			//с формированием описания ошибок в <описаниеОшибки>
//		//КонецЦикла;
//		Если ЗначениеЗаполнено(описаниеОшибки) Тогда
//			ВызватьИсключение описаниеОшибки;
//		КонецЕсли;";
//
//КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРегистрацию_ДокументВозвратТоваровПоставщикуСервер() 
	//этот объект должен ставиться на регистрацию только на перифирийных узлах
	ошибки = Новый Массив;
	СписокОбъектов = Документы.ВозвратТоваровПоставщику.Выбрать(НачалоГода(ТекущаяДата()));
	мУзлы = ПолучитьМассивУзловПланаОбмена();
	имяПланаОбмена = ИмяПланаОбмена();
	
	Пока СписокОбъектов.Следующий() Цикл
		текСсылка = СписокОбъектов.Ссылка;
  		источник = текСсылка.ПолучитьОбъект();
		отказ = Ложь;
		//вылавливаем ошибки в работе типового механизма регистрации изменений
		Попытка
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписьюДокумента(имяПланаОбмена, источник, отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
		Исключение
			ошибка = ОписаниеОшибки();
			ошибки.Добавить("Ошибка регистрации:"+текСсылка+" "+ошибка);
		КонецПопытки;
		
		получатели = источник.ОбменДанными.Получатели;
		Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда //это центральный узел регистрация запрещена			
			Если получатели.Количество()>0 Тогда
				Для Каждого узел Из получатели Цикл
					ошибки.Добавить("Ошибка регистрации:"+текСсылка+"для центральной базы запрещена регистрация на узле:"+узел);
				КонецЦикла;
			КонецЕсли;
		Иначе
			//для перифирии регистрируем только документы со складами из ордерного учета
			Если источник.Склад.дмнУчаствуетВОрдернойСхеме = Ложь Тогда
				Если получатели.Количество()>0 Тогда
					Для Каждого узел Из получатели Цикл
						ошибки.Добавить("Ошибка регистрации:"+текСсылка+"для не ордерных складов запрещена регистрация на узле:"+узел);
					КонецЦикла;
				КонецЕсли;			
			Иначе			
				//в получателях должны быть все узлы обмена, кроме текущего
				Для Каждого узел Из мУзлы Цикл
					Если НЕ получатели.Содержит(узел) Тогда
						ошибки.Добавить("Ошибка регистрации:"+текСсылка+"не зарегистрирован на узле:"+узел);
					КонецЕсли;
				КонецЦикла;			
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	Если ошибки.Количество() > 0 Тогда
		описаниеОшибок = СформироватьОписаниеИзМассива(ошибки);
		ВызватьИсключение описаниеОшибок;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРегистрацию_ДокументВозвратТоваровПоставщику() Экспорт
	ПроверитьРегистрацию_ДокументВозвратТоваровПоставщикуСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРегистрацию_СправочникПрочиеДоходыИРасходыСервер()
	ошибки = Новый Массив;
	СписокОбъектов = Справочники.ПрочиеДоходыИРасходы.Выбрать();
	мУзлы = ПолучитьМассивУзловПланаОбмена();
	имяПланаОбмена = ИмяПланаОбмена();
	
	Пока СписокОбъектов.Следующий() Цикл
		текСсылка = СписокОбъектов.Ссылка;
  		источник = текСсылка.ПолучитьОбъект();
		отказ = Ложь;
		//вылавливаем ошибки в работе типового механизма регистрации изменений
		Попытка
			ОбменДаннымиСобытия.МеханизмРегистрацииОбъектовПередЗаписью(ИмяПланаОбмена(), источник, Отказ);
		Исключение
			ошибка = ОписаниеОшибки();
			ошибки.Добавить("Ошибка регистрации:"+текСсылка+" "+ошибка);
		КонецПопытки;
		
		получатели = источник.ОбменДанными.Получатели;
		Если дмнОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() = Истина Тогда //в ПБ ничего не регистрируем
			Если получатели.Количество()>0 Тогда
				Для Каждого узел Из получатели Цикл
					ошибки.Добавить("Ошибка регистрации:"+текСсылка+"для центральной базы запрещена регистрация на узле:"+узел);
				КонецЦикла;
			КонецЕсли;
		Иначе			
			Если НЕ РегистрыСведений.дмнЭталонныеСправочники.ЭтоДопустимоеЗначение(источник) Тогда 				
				Если получатели.Количество()>0 Тогда
					Для Каждого узел Из получатели Цикл
						ошибки.Добавить("Ошибка регистрации:"+текСсылка+"для не эталонных элементов запрещена регистрация на узле:"+узел);
					КонецЦикла;
				КонецЕсли;				
			Иначе
				//в ЦБ регистрируем только эталонные элементы			
				//в получателях должны быть все узлы обмена, кроме текущего
				Для Каждого узел Из мУзлы Цикл
					Если НЕ получатели.Содержит(узел) Тогда
						ошибки.Добавить("Ошибка регистрации:"+текСсылка+"не зарегистрирован на узле:"+узел);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ошибки.Количество()>0 Тогда
		описаниеОшибок = СформироватьОписаниеИзМассива(ошибки);
		ВызватьИсключение описаниеОшибок;
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьРегистрацию_СправочникПрочиеДоходыИРасходы() Экспорт
	ПроверитьРегистрацию_СправочникПрочиеДоходыИРасходыСервер();
КонецПроцедуры

#КонецОбласти
// } блок юнит-тестов - сами тесты



